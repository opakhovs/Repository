@model Repository.Viewmodels.ArtifactsViewModels.CreateViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Artifact</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.DateOfAdding, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DateOfAdding, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DateOfAdding, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Version, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Version, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Version, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => Model.ArtifactType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-5">
            @Html.DropDownListFor(x => Model.ArtifactType, new SelectList(Model.Types, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "ArtifactType" })
            @Html.ValidationMessageFor(x => x.ArtifactType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => Model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-5">
            @Html.DropDownListFor(x => Model.Rating, new MultiSelectList(Model.Ratings, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "Ratings" })
            @Html.ValidationMessageFor(x => x.Rating, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(x => Model.Tag, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-5">
            @Html.DropDownListFor(x => Model.Tag, new MultiSelectList(Model.Tags, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "Tags" })
            @Html.ValidationMessageFor(x => x.Tag, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => Model.Project, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-5">
            @Html.DropDownListFor(x => Model.Project, new MultiSelectList(Model.Projects, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "Projects" })
            @Html.ValidationMessageFor(x => x.Project, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => Model.Domain, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-5">
            @Html.DropDownListFor(x => Model.Domain, new MultiSelectList(Model.Domains, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "Domains" })
            @Html.ValidationMessageFor(x => x.Domain, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => Model.SubTask, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-5">
            @Html.DropDownListFor(x => Model.SubTask, new MultiSelectList(Model.SubTasks, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "SubTask" })
            @Html.ValidationMessageFor(x => x.SubTask, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
